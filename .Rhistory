# Datasource:
set.seed(20573584)
x <- rbinom(1000, 50, 0.5)
y <- runif(1000, 0, 1)
view(y)
data <- c(x,y)
View(data)
y <- runif(1000, 1, 100)
data <- (x,y)
data <- merg(x,y)
data <- merge(x,y)
View(data)
# Datasource:
set.seed(20573584)
x <- rbinom(1000, 50, 0.5)
y <- runif(1000, 1, 100)
data <- merge(x,y)
View(data)
y <- rep(runif(1, 1, 100), 1000)
View(data)
# Datasource:
set.seed(20573584)
x <- rbinom(1000, 50, 0.5)
y <- rep(runif(1, 1, 100), 1000)
data <- merge(x,y)
View(data)
y <- runif(1, 1, 100)
y <- runif(100, 1, 100)
y <- runif(1000, 1, 100)
data <- merge(x,y)
View(data)
y <- runif(1000, 1, 100)
View(y)
data <- my.array <- array(NA, dim=c(1000,1000))
View(data)
3.07^2 / 3.01^2
power.prop.test(p1 = .78, p2 = .84, sig.level = .05, power = 1 - .05)
ceiling(power.prop.test(p1 = .78, p2 = .84, sig.level = .05, power = 1 - .05)$n)
install.packages("include_graphics")
install.packages("load.image")
install.packages("png")
# IMPORT LIBRARIES AND DATASETS
library(corrplot)
library(scales)
p16 <- read.csv("properties_2016.csv")
p17 <- read.csv("properties_2017.csv")
properties <- rbind(p16, p17)
corrplot(properties)
# DATA CLEANING
NA.count <- rep(0, ncol(properties))
for (ii in 1:ncol(properties)){
NA.count[ii] <- sum(is.na(properties[ii]))
}
NA.count <- percent(NA.count / nrow(properties)) * 100
Header <- c("Condition", "A", "B", "C", "AB", "AC", "BC", "ABC")
C1 <- c(1, -1, -1, -1, 1, 1, 1, -1)
C2 <- c(2, 1, -1, -1, -1, -1, 1, 1)
Cetc <- c("...")
C8 <- c(8, 1, 1, 1, 1, 1, 1, 1)
ext_design_matrix <- rbind(Header, C1, C2, Cetc, C8)
ext_design_matrix
class(ext_design_matrix)
seasonality <- Sys.getenv("seasonality")
seasonality <- eval(parse(text = Sys.getenv("seasonality")))
seasonality <- eval(parse(text = Sys.getenv("seasonality")))
seasonality <- Sys.getenv("seasonality")
seasonality
seasonality <- eval(parse(text = Sys.getenv("seasonality")))
seasonality <- as.boolean(Sys.getenv("seasonality"))
seasonality <- as.logical(Sys.getenv("seasonality"))
seasonality <- as.logical(parse(Sys.getenv("seasonality")))
seasonality <- as.logical(eval(parse(Sys.getenv("seasonality"))))
#package loading
library(rtsdata)
library(ggplot2)
library(prophet)
library(htmlwidgets)
#pull .env variables
root <- "/Users/anthony_chan/OneDrive/Projects/stockprice_forecasting/"
setwd(root)
readRenviron("settings.env")
symbol <- Sys.getenv("symbol")
start_date <- Sys.getenv("start_date")
end_date <- eval(parse(text = Sys.getenv("end_date")))
pred_length <- as.numeric(Sys.getenv("pred_length"))
seasonality <- as.logical(eval(parse(Sys.getenv("seasonality"))))
seasonality <- as.logical(parse(Sys.getenv("seasonality")))
seasonality <- as.logical(eval(Sys.getenv("seasonality")))
#package loading
library(rtsdata)
library(ggplot2)
library(prophet)
library(htmlwidgets)
#pull .env variables
root <- "/Users/anthony_chan/OneDrive/Projects/stockprice_forecasting/"
setwd(root)
readRenviron("settings.env")
symbol <- Sys.getenv("symbol")
start_date <- Sys.getenv("start_date")
end_date <- eval(parse(text = Sys.getenv("end_date")))
pred_length <- as.numeric(Sys.getenv("pred_length"))
seasonality <- as.logical(eval(Sys.getenv("seasonality")))
#fetch function from yahoo
yahoo.fetch <- function(symbol, start_date, end_date) {
df <- ds.getSymbol.yahoo(symbol, from = start_date, to = end_date)
df <- fortify(df)
df <- df[,c(1,7)]
df[is.na(df)] <- 0
names(df) <- c("ds", "y")
return(df)
}
#cross-validate over every week for the past half year
cv <- function() {
#df.cv <- cross_validation(model, initial = end_date - as.Date(start_date) - floor(365/2), period = 7, horizon = pred_length, units = 'days')
df.cv <- cross_validation(model, initial = floor(365/2), period = 7, horizon = pred_length, units = 'days')
df.p <- performance_metrics(df.cv)
AMAPE <- mean(df.p$mape)
return(round(AMAPE,3))
}
#data visualization output
output.graphs <- function(AMAPE) {
setwd("figures")
if (seasonality == TRUE) {
jpeg(paste(symbol, "-seasonality.jpg", sep = ""))
prophet_plot_components(model, forecast)
dev.off()
}
interactive_plot <- dyplot.prophet(model, forecast, uncertainty = TRUE)
saveWidget(interactive_plot, paste(symbol, "@[", AMAPE, "].html", sep = ""),
title = paste(symbol, " Forecasted to ", end_date + pred_length, sep = ""))
setwd(root)
}
#core function calls for modelling and forecasting
df <- yahoo.fetch(symbol, start_date, end_date)
model <- prophet(df, daily.seasonality=TRUE)
future <- make_future_dataframe(model, periods = pred_length)
forecast <- predict(model, future)
output.graphs(cv())
#package loading
library(rtsdata)
library(ggplot2)
library(prophet)
library(htmlwidgets)
#pull .env variables
root <- "/Users/anthony_chan/OneDrive/Projects/stockprice_forecasting/"
setwd(root)
readRenviron("settings.env")
symbol <- Sys.getenv("symbol")
start_date <- Sys.getenv("start_date")
end_date <- eval(parse(text = Sys.getenv("end_date")))
pred_length <- as.numeric(Sys.getenv("pred_length"))
seasonality <- as.logical(eval(Sys.getenv("seasonality")))
#fetch function from yahoo
yahoo.fetch <- function(symbol, start_date, end_date) {
df <- ds.getSymbol.yahoo(symbol, from = start_date, to = end_date)
df <- fortify(df)
df <- df[,c(1,7)]
df[is.na(df)] <- 0
names(df) <- c("ds", "y")
return(df)
}
#cross-validate over every week for the past half year
cv <- function() {
#df.cv <- cross_validation(model, initial = end_date - as.Date(start_date) - floor(365/2), period = 7, horizon = pred_length, units = 'days')
df.cv <- cross_validation(model, initial = floor(365/2), period = 7, horizon = pred_length, units = 'days')
df.p <- performance_metrics(df.cv)
AMAPE <- mean(df.p$mape)
return(round(AMAPE,3))
}
#data visualization output
output.graphs <- function(AMAPE) {
setwd("figures")
if (seasonality == TRUE) {
jpeg(paste(symbol, "-seasonality.jpg", sep = ""))
prophet_plot_components(model, forecast)
dev.off()
}
interactive_plot <- dyplot.prophet(model, forecast, uncertainty = TRUE)
saveWidget(interactive_plot, paste(symbol, "@[", AMAPE, "].html", sep = ""),
title = paste(symbol, " Forecasted to ", end_date + pred_length, sep = ""))
setwd(root)
}
#core function calls for modelling and forecasting
df <- yahoo.fetch(symbol, start_date, end_date)
model <- prophet(df, daily.seasonality=TRUE)
future <- make_future_dataframe(model, periods = pred_length)
forecast <- predict(model, future)
output.graphs(cv())
if seasonality {
jpeg(paste(symbol, "-seasonality.jpg", sep = ""))
prophet_plot_components(model, forecast)
dev.off()
}
if (seasonality) {
jpeg(paste(symbol, "-seasonality.jpg", sep = ""))
prophet_plot_components(model, forecast)
dev.off()
}
#package loading
library(rtsdata)
library(ggplot2)
library(prophet)
library(htmlwidgets)
#pull .env variables
root <- "/Users/anthony_chan/OneDrive/Projects/stockprice_forecasting/"
setwd(root)
readRenviron("settings.env")
symbol <- Sys.getenv("symbol")
start_date <- Sys.getenv("start_date")
end_date <- eval(parse(text = Sys.getenv("end_date")))
pred_length <- as.numeric(Sys.getenv("pred_length"))
seasonality <- as.logical(eval(Sys.getenv("seasonality")))
#fetch function from yahoo
yahoo.fetch <- function(symbol, start_date, end_date) {
df <- ds.getSymbol.yahoo(symbol, from = start_date, to = end_date)
df <- fortify(df)
df <- df[,c(1,7)]
df[is.na(df)] <- 0
names(df) <- c("ds", "y")
return(df)
}
#cross-validate over every week for the past half year
cv <- function() {
#df.cv <- cross_validation(model, initial = end_date - as.Date(start_date) - floor(365/2), period = 7, horizon = pred_length, units = 'days')
df.cv <- cross_validation(model, initial = floor(365/2), period = 7, horizon = pred_length, units = 'days')
df.p <- performance_metrics(df.cv)
AMAPE <- mean(df.p$mape)
return(round(AMAPE,3))
}
#data visualization output
output.graphs <- function(AMAPE) {
setwd("figures")
if (seasonality) {
jpeg(paste(symbol, "-seasonality.jpg", sep = ""))
prophet_plot_components(model, forecast)
dev.off()
}
interactive_plot <- dyplot.prophet(model, forecast, uncertainty = TRUE)
saveWidget(interactive_plot, paste(symbol, "@[", AMAPE, "].html", sep = ""),
title = paste(symbol, " Forecasted to ", end_date + pred_length, sep = ""))
setwd(root)
}
#core function calls for modelling and forecasting
df <- yahoo.fetch(symbol, start_date, end_date)
model <- prophet(df, daily.seasonality=TRUE)
future <- make_future_dataframe(model, periods = pred_length)
forecast <- predict(model, future)
output.graphs(cv())
